import heapq
def totalCost(costs, k, candidates):
    left_heap = []
    right_heap = []
    for i, cost in enumerate(costs[:candidates]):
        heapq.heappush(left_heap, (cost, i))
    for i, cost in enumerate(costs[-candidates:]):
        heapq.heappush(right_heap, (cost, -(len(costs) - i)))    
    total_cost = 0
    for _ in range(k):
        if left_heap and right_heap:
            left_cost, left_index = left_heap[0]
            right_cost, right_index = right_heap[0]
            if left_cost < right_cost or (left_cost == right_cost and left_index < -right_index):
                total_cost += left_cost
                heapq.heappop(left_heap)
                if len(left_heap) < candidates and left_index + 1 < len(costs[:candidates]):
                    next_cost = costs[left_index + 1]
                    heapq.heappush(left_heap, (next_cost, left_index + 1))
            else:
                total_cost += right_cost
                heapq.heappop(right_heap)
                if len(right_heap) < candidates and -(right_index + 1) >= 0:
                    next_cost = costs[-(right_index + 3) - 1]
                    heapq.heappush(right_heap, (next_cost, -(right_index + 1)))
        elif left_heap:
            total_cost += heapq.heappop(left_heap)[0]
        else:
            total_cost += heapq.heappop(right_heap)[0]   
    return total_cost
print(totalCost([1,2,4,1], 3, 3))  
