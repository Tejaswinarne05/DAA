class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def sortList(head):
    if not head or not head.next:
        return head
    
    # Function to split the linked list into two halves
    def split(head):
        slow, fast = head, head.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        mid = slow.next
        slow.next = None
        return head, mid
    
    # Function to merge two sorted linked lists
    def merge(l1, l2):
        dummy = ListNode()
        tail = dummy
        while l1 and l2:
            if l1.val < l2.val:
                tail.next, l1 = l1, l1.next
            else:
                tail.next, l2 = l2, l2.next
            tail = tail.next
        tail.next = l1 or l2
        return dummy.next
    
    # Recursive merge sort function
    def mergeSort(head):
        if not head or not head.next:
            return head
        left, right = split(head)
        left = mergeSort(left)
        right = mergeSort(right)
        return merge(left, right)
    
    return mergeSort(head)

head = ListNode(4, ListNode(2, ListNode(1, ListNode(3))))
sorted_head = sortList(head)

# Function to print the sorted linked list
def printList(head):
    while head:
        print(head.val, end=" -> ")
        head = head.next
    print("None")

printList(sorted_head)  # Output: 1 -> 2 -> 3 -> 4 -> None
