class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def sort_list(head):
    if not head or not head.next:
        return head

    def split(head):
        slow, fast = head, head.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        mid = slow.next
        slow.next = None
        return head, mid

    def merge(l1, l2):
        dummy = ListNode()
        curr = dummy
        while l1 and l2:
            if l1.val < l2.val:
                curr.next = l1
                l1 = l1.next
            else:
                curr.next = l2
                l2 = l2.next
            curr = curr.next
        curr.next = l1 if l1 else l2
        return dummy.next

    def merge_sort(head):
        if not head or not head.next:
            return head
        left, right = split(head)
        left = merge_sort(left)
        right = merge_sort(right)
        return merge(left, right)

    return merge_sort(head)

head = ListNode(4, ListNode(2, ListNode(1, ListNode(3))))
sorted_head = sort_list(head)
