from heapq import heappush, heappop
from typing import List, Optional

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def merge_k_lists(lists: List[Optional[ListNode]]) -> Optional[ListNode]:
    min_heap = []
    
    # Initialize the heap with the head of each list
    for index, node in enumerate(lists):
        if node:
            heappush(min_heap, (node.val, index, node))
    
    dummy = ListNode()
    current = dummy
    
    while min_heap:
        value, index, node = heappop(min_heap)
        current.next = node
        current = current.next
        if node.next:
            heappush(min_heap, (node.next.val, index, node.next))
    
    return dummy.next

# Example usage
def list_to_nodes(lst):
    dummy = ListNode()
    current = dummy
    for val in lst:
        current.next = ListNode(val)
        current = current.next
    return dummy.next

def nodes_to_list(node):
    result = []
    while node:
        result.append(node.val)
        node = node.next
    return result

lists = [
    list_to_nodes([1, 4, 5]),
    list_to_nodes([1, 3, 4]),
    list_to_nodes([2, 6])
]

merged_list = merge_k_lists(lists)
print(nodes_to_list(merged_list))  # Output: [1, 1, 2, 3, 4, 4, 5, 6]
